#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define NODE_MAX 1001 
#define EDGE_MAX 600001   // 양방향 간선이므로 300,000개

//다익스트라의 최단경로   _ 프림알고리즘과 거의 흡사 
//트리(테이블)에 포함시키면 그 곳을 거쳐서 이동할 수 있다는 것이므로 최소이동거리가 갱신된다 

typedef struct {
	int cost;
	int node;
} Edge;

//각 간선끼리의 정보 교환가능 -> 우선순위큐에 각 간선의 정보가 담길 것이기 때문에 이런 함수 구현
void swap(Edge *a, Edge *b) {
	Edge temp;
	temp.cost = a->cost;
	temp.node = a->node;
	a->cost = b->cost;
	a->node = b->node;
	b->cost = temp.cost;
	b->node = temp.node;
}

typedef struct {
	Edge *heap[EDGE_MAX];   //간선을 담을 배열 
	int count;
} priorityQueue;

void push(priorityQueue *pq, Edge *edge) {
	if (pq->count >= EDGE_MAX) return;
	pq->heap[pq->count] = edge;
	int now = pq->count;
	int parent = (pq->count - 1) / 2;
	//새 원소를 삽입한 이후에 상향식으로 힙을 구성 (우선순위큐)
	while (now > 0 && pq->heap[now]->cost < pq->heap[parent]->cost) {
		swap(pq->heap[now], pq->heap[parent]);
		now = parent;
		parent = (parent - 1) / 2;
	}
	pq->count++;
}

Edge* pop(priorityQueue *pq) {
	if (pq->count <= 0) return NULL;
	Edge *res = pq->heap[0];
	pq->count--;
	pq->heap[0] = pq->heap[pq->count];
	int now = 0, leftChild = 1, rightChild = 2;
	int target = now;
	// 새 원소를 추출한 이후에 하양식으로 힙을 구성
	while (leftChild < pq->count) {
		if (pq->heap[target]->cost > pq->heap[leftChild]->cost) target = leftChild;
		if (pq->heap[target]->cost > pq->heap[rightChild]->cost && rightChild < pq->count) target = rightChild;
		if (target == now) break; // 더 이상 내려가지 않아도 될 때 종료
		else {
			swap(pq->heap[now], pq->heap[target]);
			now = target;
			leftChild = now * 2 + 1;
			rightChild = now * 2 + 2;
		}
	}
	return res;
}

//각 노드(정점은) 연결리스트(인접리스트방식)를 이용해서 그래프 표현 (간선연결리스트)
//연결리스트로 연결되어있는 모든 엣지들을 담을것
typedef struct Node {
	Edge *data;
	struct Node *next;
} Node;

Node** adj;
int ans[NODE_MAX];
//특정한 index의 정점에 특정한 간선(edge)가 추가되는 것을 addNode함수로 표현 
void addNode(Node** target, int index, Edge* edge) {
	if (target[index] == NULL) {
		target[index] = (Node*)malloc(sizeof(Node));
		target[index]->data = edge;
		target[index]->next = NULL;        //연결리스트가 비어있다면 (= 특정 정점에 연결되어있는 간선이 하나도 없다면) 첫번째 원소에 해당 간선을 넣어주면 된다. 
	}
	else {
		Node* node = (Node*)malloc(sizeof(Node));
		node->data = edge;
		node->next = target[index];
		target[index] = node;     //그렇지 않다면, 연결리스트에 새롭게 삽입할 수 있도록 만들어준다. 
	}
}

int main(void) { 
	int n, m, k;    //k는 출발 노드 
	scanf("%d %d %d", &n, &m, &k);
	adj = (Node**)malloc(sizeof(Node*) * (n + 1));
	for (int i = 1; i <= n; i++) {
		adj[i] = NULL;
		ans[i] = INT_MAX; //우선 모든 거리값을 max로 초기화
	}
	priorityQueue *pq;
	pq = (priorityQueue*)malloc(sizeof(priorityQueue));
	pq->count = 0;
	for (int i = 0; i < m; i++) {
		int a, b, c;
		scanf("%d %d %d", &a, &b, &c);
		Edge *edge = (Edge*)malloc(sizeof(Edge));
		edge->node = b;
		edge->cost = c;
		addNode(adj, a, edge); //ans[] : 특정노드까지의 최단거리값을 의미
		//간선에대한 정보를 우선순위큐에 담는다 >> 방향그래프로 구성 _ a번째 index의 연결리스트에 원소 b를 추가하는 방식 (a에서 b로가는 거리가 c다)
	}
	//다익스트라 알고리즘 시작 
	ans[k] = 0;
	Edge *start = (Edge*)malloc(sizeof(Edge));
	start->cost = 0; start->node = k; push(pq, start);
	while (1) { //우선순위 큐에서 원소를 꺼내고, 그 원소에 연결되어있는 간선들을 다 확인한 다음에, 그 노드를 거쳐서 가는 비용이 더 적다면 테이블 갱신 
		Edge* now = pop(pq); //큐에서 pop을 통해 원소를 뽑으면서 원소가 바닥날때까지 알고리즘 수행 (>> 모든 간선에 대한 정보를 다 큐에 담았다가 꺼낸다는 뜻) 
		if (now == NULL) break;
		int curNode = now->node;
		int curCost = now->cost;
		if (ans[curNode] < curCost) continue;
		Node* cur = adj[curNode];         //노드의 집합 (트리 T)에 특정한 노드가 추가되었다 
		while (cur != NULL) {
			Edge* temp = cur->data;
			temp->cost += curCost;
			if (temp->cost < ans[temp->node]) { ans[temp->node] = temp->cost; push(pq, temp); }
			cur = cur->next;
		}
	}
	for (int i = 1; i <= n;i++) {
		if (ans[i] == INT_MAX)printf("INF\n");
		else printf("%d\n", ans[i]);
	}
	system("pause");
	
}