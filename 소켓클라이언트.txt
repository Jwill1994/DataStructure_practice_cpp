#define _WINSOCK_DEPRECATED_NO_WARNINGS   //deprecated 처리가 된 inet_addr함수를 그대로 사용하기위해서 명시 
#include <iostream>
#include <string>
#include <winsock2.h>

using namespace std;

void ShowErrorMessage(string message)
{
	cout << "[오류발생]: " << message << '\n';
	system("pause");
	exit(1);
}
int main()
{
	WSADATA wsaData;  //winsock API 데이터 구조체
	SOCKET clientSocket; //server 단 에서는 서버,클라이언트용 소켓 둘다 필요
	SOCKADDR_IN serverAddress;

	int serverPort = 9876;
	char received[256]; //주고받는 데이터 문자열 버퍼크기
	string sent;

	//PF_INET은 AF_INET과 동일하다. ip v4를 이용하겠다는 의미이다 
	//SOCK_STREAM은 TCP 형태로 어떤 서버를 운용하겠다는 것을 의미한다 
	if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) //Winsock을 초기화. 성공시 0반환
		ShowErrorMessage("WSAStartup()");

	clientSocket = socket(PF_INET, SOCK_STREAM, 0); // TCP 소켓을 생성

	if (clientSocket == INVALID_SOCKET)
		ShowErrorMessage("socket()");

	memset(&serverAddress, 0, sizeof(serverAddress));  //주소 0으로 초기화
	serverAddress.sin_family = AF_INET;
	serverAddress.sin_addr.s_addr = inet_addr("127.0.0.1"); //문자열 IP를 네트워크 바이트 형식으로  / 자기자신의 컴퓨터를 나타내는 약속된 ip 
	serverAddress.sin_port = htons(serverPort); // 2바이트 정수를 네트워크 바이트 형식으로
	if (connect(clientSocket, (SOCKADDR*)&serverAddress, sizeof(serverAddress)) == SOCKET_ERROR)
		ShowErrorMessage("connect()");
	cout << "[현재상태] connect()\n";

	while (1) { //반복적으로 서버로 메시지를 전송하고 에코 메시지를 전달 받는다
		cout << "[메시지 전송]: ";
		getline(cin, sent);
		if (sent == "") continue;
		send(clientSocket, sent.c_str(), sent.length(), 0);
		int length = recv(clientSocket, received, sizeof(received), 0);
		received[length] = '\0'; //마지막엔 null값을 넣어서 문자열 효과적으로 처리 
		if (strcmp(received, "[exit]") == 0) {
			cout << "[서버종료]\n";   //사용자가 보낸 문자가 [exit] 이라면 서버프로그램 종료 
			break;
		}
		cout << "[서버 메시지]: " << received << '\n';
	}

	closesocket(clientSocket);
	WSACleanup();
	system("pause");
	return 0;
}