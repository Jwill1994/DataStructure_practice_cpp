#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*Stack을 활용한 계산기 구현*/

typedef struct Node {
	char data[100];
	struct Node *next;
} Node;

typedef struct Stack {
	Node *top;
} Stack;

void push(Stack *stack, char *data) {
	Node *node = (Node*)malloc(sizeof(Node));
	/* node->data = data; */
	strcpy(node->data, data);
	node->next = stack->top;
	stack->top = node;
}

char* getTop(Stack *stack) {
	Node *top = stack->top;
	return top->data;
}

char* pop(Stack *stack) {
	if (stack->top == NULL) {
		printf("스택 언더플로우 발생. \n");
		/*return -INF; 문제발생을 알려줌*/
		return NULL;
	}
	Node* node = stack->top;
	/*int data = node->data;*/
	char *data = (char*)malloc(sizeof(char) * 100);
	strcpy(data, node->data);
	stack->top = node->next;
	free(node);
	return data;
}

int getPriority(char* i) {
	if (!strcmp(i, "(")) return 0; /*strcmp는 두 비교대상이 같으면 0을 반환하므로 false로 인식되기때문에 !연산자를 통해서 다시 참으로 변환 */
	if (!strcmp(i, "+") || !strcmp(i, "-")) return 1;
	if (!strcmp(i, "*") || !strcmp(i, "/")) return 2;
	return 3;
}

char res[1000] = "";   /* 후위 표기법으로 바뀐 문자열이 닮길 배열 resort  _  로컬로 선언하면 안됨 */  
/* **s 는 연산자, 피연산자로 나뉘어져 들어올 문자열 */
char* transition(Stack *stack, char **s, int size) {
	
	for (int i = 0; i < size; i++) {
		if (!strcmp(s[i], "+") || !strcmp(s[i], "-") || !strcmp(s[i], "*") || !strcmp(s[i], "/")) {
			while (stack->top != NULL && getPriority(getTop(stack)) >= getPriority(s[i])) {
				strcat(res, pop(stack)); strcat(res, " ");  // (한 문자 후 띄어쓰기 삽입)
			}
			push(stack, s[i]);    // 위의 while문에서 자신보다 연산우선순위가 높은것들을 stack에서 뽑은 뒤에, 여기서 push로 자신을 stack에 넣는 것 
		}
		else if (!strcmp(s[i], "(")) push(stack, s[i]);
		else if (!strcmp(s[i], ")")) {
			while (strcmp(getTop(stack), "(")) {
				strcat(res, pop(stack)); strcat(res, " ");   //여는 괄호가 나올때까지 스택에서 뽑아서 결과배열에 담아(즉, 바로 출력하겠다는 의미)
			}
			pop(stack);  // 마지막으로 여는괄호 (까지 뽑아내는 것 
		}
		else { strcat(res, s[i]); strcat(res, " "); } //일반 숫자의 경우 바로 출력 (결과문자열 res에 담아)
	}
	while (stack->top != NULL) {
		strcat(res, pop(stack)); strcat(res, " ");   //stack에 남아있는 문자가 있다면 다 꺼내줘 
	}
	return res;   //후위표기법 뽑아내 
}

// **s : 연산자, 피연산자가 문자열 형태로 하나씩 들어옴 
void calculate(Stack *stack, char **s, int size) {
	int x, y, z;
	for (int i = 0; i < size; i++) {
		if (!strcmp(s[i], "+") || !strcmp(s[i], "-") || !strcmp(s[i], "*") || !strcmp(s[i], "/")) {
			x = atoi(pop(stack));
			y = atoi(pop(stack));
			if (!strcmp(s[i], "+")) z = y + x;       //x가 더 나중에 들어온 원소이므로 y부터 연산표기 순서 지켜줘야함 
			if (!strcmp(s[i], "-")) z = y - x; 
			if (!strcmp(s[i], "*")) z = y * x;
			if (!strcmp(s[i], "/")) z = y / x;
			char buffer[100];
			sprintf(buffer, "%d", z);          //sprintf : 계산된 숫자 z를 다시 문자열로 바꿔서 buffer에 저장 
			push(stack, buffer);
		}
		else {
			push(stack, s[i]);
		}
	}
	printf("%s\n", pop(stack));
}
/*
void show(Stack *stack) {
	Node *cur = stack->top;
	printf("--스택의 최상단--\n");
	while (cur != NULL) {
		printf("%d\n", cur->data);
		cur = cur->next;
	}
	printf("--스택의 최하단--\n");
}
*/
int main(void) {
	Stack stack;
	stack.top = NULL;   /*함수 내의 while문 체크*/
	char a[100] = "( ( 3 + 4 ) * 5 ) - 5 * 7 * 5 - 5 * 10";
	int size = 1;
	for (int i = 0; i < strlen(a); i++) {
		if (a[i] == ' ') size++;
	}
	char *ptr = strtok(a, " ");        //stringlib의 strtok : 각각의 문자열을 띄어쓰기를 기준으로 토큰으로 분리 
	char **input = (char**)malloc(sizeof(char*) * size);
	for (int i = 0; i < size; i++) {
		input[i] = (char*)malloc(sizeof(char) * 100);
	}
	for (int i = 0; i < size; i++) {
		strcpy(input[i], ptr);
		ptr = strtok(NULL, " ");   //그 다음 토큰을 확인하기 위해 
	}
	char b[1000] = "";
	strcpy(b, transition(&stack, input, size));
	printf("후위 표기법 : %s\n", b);
	size = 1; 
	for (int i = 0; i < strlen(b) - 1; i++) {  //후위표기법으로 바꿀 때 while 문에서 마지막은 항상 공백이 들어가므로 1을 빼기 
		if (b[i] == ' ') size++;
	}
	char *ptr2 = strtok(b, " ");
	for (int i = 0; i < size; i++) {
		strcpy(input[i], ptr2);
		ptr2 = strtok(NULL, " ");
	}
	calculate(&stack, input, size);
	system("pause");
	return 0;
}