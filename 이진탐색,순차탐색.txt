#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
//순차탐색  _  O(N) 시간복잡도
/*
#define LENGTH 100

char **array;
int founded;  // 특정 원소를 발견했는지에 대한 정보 

int main(void) {
	int n;
	char *word;
	word = malloc(sizeof(char) * LENGTH);
	scanf("%d %s", &n, word);
	array = (char**)malloc(sizeof(char*) * n);  // 이중 array이므로 포인터형 동적할당
	for (int i = 0; i < n; i++) {
		array[i] = malloc(sizeof(char) * LENGTH);
		scanf("%s", array[i]);
	}
	for (int i = 0; i < n; i++) {
		if (!strcmp(array[i], word)) {
			printf("%d번째 원소입니다. \n", i + 1);
			founded = 1;
		}
	}
	if (!founded) printf("원소 찾을 수 없다. \n");
	system("pause");
	return 0;
}
*/

//이진탐색 _ O(logN) 시간복잡도 _ 배열내부데이터가 이미 정렬되어 있는 상황에서 사용가능한 알고리즘 _ 탐색 범위를 절반씩 좁혀가며 데이터 탐색 

#define MAX_SIZE 100000

int a[MAX_SIZE];
int founded = 0;

int search(int start, int end, int target) {
	if (start > end) return -9999;
	int mid = (start + end) / 2;
	if (a[mid] == target) return mid;
	else if (a[mid] > target) return search(start, mid - 1, target);  //재귀함수 
	else return search(mid + 1, end, target);
}

// 데이터는 기본적으로 정렬이 된 상태로 입력이 되어야함 
int main(void) {
	int n, target;
	scanf("%d %d", &n, &target);
	for (int i = 0; i < n; i++) scanf("%d", &a[i]);
	int result = search(0, n - 1, target);
	if (result != -9999) printf("%d번째 원소입니다\n", result + 1);
	else printf("원소를 찾을 수 없다 \n");
	system("pause");
	return 0;
}
